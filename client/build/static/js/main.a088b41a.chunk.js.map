{"version":3,"sources":["utils/mutations.js","utils/auth.js","utils/localStorage.js","pages/SearchPlants.js","utils/API.js","utils/queries.js","pages/SavedPlants.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","Assets/Garden.jpeg","pages/Home.js","components/Footer.js","App.js","index.js"],"names":["LOGIN_USER","gql","ADD_USER","ADD_PLANT","REMOVE_PLANT","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removePlantId","plantId","savedPlantIds","JSON","parse","updatedSavedPlantIds","filter","savedPlantId","stringify","SearchPlants","useState","searchedPlants","setSearchedPlants","searchInput","setSearchInput","setSavedPlantIds","useMutation","addPlant","useEffect","plantIdArr","length","handleFormSubmit","event","preventDefault","fetch","response","ok","Error","json","items","plantData","map","plant","bookId","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","error","handleSavePlant","plantToSave","find","Auth","loggedIn","variables","input","Jumbotron","fluid","className","scrolling","frameborder","height","width","src","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","border","Img","alt","Body","Title","Text","disabled","some","onClick","GET_ME","SavedPlants","useQuery","loading","data","removePlant","userData","me","handleDeletePlant","savedPlants","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","loginUser","AppNavbar","showModal","setShowModal","Navbar","expand","Brand","as","Link","to","Toggle","Collapse","Nav","logout","Modal","onHide","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","Home","garden","Footer","class","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a088b41a.chunk.js","sourcesContent":["import {gql} from \"@apollo/client\";\r\n\r\nexport const LOGIN_USER = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n  mutation addUser($username: String!, $email: String!, $password: String!) {\r\n    addUser(username: $username, email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_PLANT = gql`\r\n  mutation addPlant($input: savedPlants!) {\r\n    addPlant(input: $input) {\r\n      _id\r\n      username\r\n      email\r\n      plantCount\r\n      savedPlants {\r\n        bookId\r\n        authors\r\n        image\r\n        link\r\n        title\r\n        description\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const REMOVE_PLANT = gql`\r\n  mutation removePlant($plantId: ID!) {\r\n    removePlant(plantId: $plantId) {\r\n      _id\r\n      username\r\n      email\r\n      plantCount\r\n      savedPlants {\r\n        bookId\r\n        authors\r\n        image\r\n        link\r\n        title\r\n        description\r\n      }\r\n    }\r\n  }\r\n`;","// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","export const getSavedPlantIds = () => {\n  const savedPlantIds = localStorage.getItem('saved_plants')\n    ? JSON.parse(localStorage.getItem('saved_plants'))\n    : [];\n\n  return savedPlantIds;\n};\n\nexport const savePlantIds = (plantIdArr) => {\n  if (plantIdArr.length) {\n    localStorage.setItem('saved_plants', JSON.stringify(plantIdArr));\n  } else {\n    localStorage.removeItem('saved_plants');\n  }\n};\n\nexport const removePlantId = (plantId) => {\n  const savedPlantIds = localStorage.getItem('saved_plants')\n    ? JSON.parse(localStorage.getItem('saved_plants'))\n    : null;\n\n  if (!savedPlantIds) {\n    return false;\n  }\n\n  const updatedSavedPlantIds = savedPlantIds?.filter((savedPlantId) => savedPlantId !== plantId);\n  localStorage.setItem('saved_plants', JSON.stringify(updatedSavedPlantIds));\n\n  return true;\n};\n","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport { ADD_PLANT } from '../utils/mutations';\nimport Auth from '../utils/auth';\nimport { searchGoogleBooks } from '../utils/API';\nimport { savePlantIds, getSavedPlantIds } from '../utils/localStorage';\n\nconst SearchPlants = () => {\n  const [searchedPlants, setSearchedPlants] = useState([]);\n  const [searchInput, setSearchInput] = useState('');\n\n  const [savedPlantIds, setSavedPlantIds] = useState(getSavedPlantIds());\n  const [addPlant] = useMutation(ADD_PLANT);\n\n  useEffect(() => {\n    return () => savePlantIds(savedPlantIds);\n  });\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const plantData = items.map((plant) => ({\n        bookId: plant.id,\n        authors: plant.volumeInfo.authors || ['No author to display'],\n        title: plant.volumeInfo.title,\n        description: plant.volumeInfo.description,\n        image: plant.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedPlants(plantData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleSavePlant = async (plantId) => {\n    const plantToSave = searchedPlants.find((plant) => plant.plantId === plantId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      await addPlant({\n        variables: { input: plantToSave },\n      });\n\n      setSavedPlantIds([...savedPlantIds, plantToSave.plantId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light text-center background'>\n    <h1 className=\"textWhite\">Find your Area</h1>\n    <iframe scrolling=\"no\" frameborder=\"0\" title=\"Hardiness Map\" height=\"650px\" width=\"1100px\" data-src=\"https://usdaars.maps.arcgis.com/apps/webappviewer/index.html?id=00a463f18c254d39b5dd6274cc4f92f9\" src=\"https://usdaars.maps.arcgis.com/apps/webappviewer/index.html?id=00a463f18c254d39b5dd6274cc4f92f9\"></iframe>\n        <Container>\n          <h1>Search for Plants!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a plant'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedPlants.length\n            ? `Viewing ${searchedPlants.length} results:`\n            : 'Search for a plant to begin'}\n        </h2>\n        <CardColumns>\n          {searchedPlants.map((plant) => {\n            return (\n              <Card key={plant.plantId} border='dark'>\n                {plant.image ? (\n                  <Card.Img src={plant.image} alt={`The cover for ${plant.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{plant.title}</Card.Title>\n                  <p className='small'>Authors: {plant.authors}</p>\n                  <Card.Text>{plant.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedPlantIds?.some((savedPlantId) => savedPlantId === plant.plantId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSavePlant(plant.plantId)}>\n                      {savedPlantIds?.some((savedPlantId) => savedPlantId === plant.plantId)\n                        ? 'This plant has already been saved!'\n                        : 'Save this Plant!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchPlants;\n","// route to get logged in user's info (needs the token)\nexport const getMe = (token) => {\n  return fetch('/api/users/me', {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\nexport const createUser = (userData) => {\n  return fetch('/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\nexport const loginUser = (userData) => {\n  return fetch('/api/users/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\n// save book data for a logged in user\nexport const savePlant = (plantData, token) => {\n  return fetch('/api/users', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(plantData),\n  });\n};\n\n// remove saved book data for a logged in user\nexport const deletePlant = (plantId, token) => {\n  return fetch(`/api/users/plants/${plantId}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n","import gql from \"graphql-tag\";\r\n\r\nexport const GET_ME = gql`\r\n  query me {\r\n    me {\r\n      _id\r\n      username\r\n      email\r\n      plantCount\r\n      savedPlants {\r\n        bookId\r\n        authors\r\n        image\r\n        link\r\n        title\r\n        description\r\n      }\r\n    }\r\n  }\r\n`;","import { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\n\nimport { REMOVE_PLANT } from \"../utils/mutations\";\nimport Auth from '../utils/auth';\nimport { removePlantId } from '../utils/localStorage';\nimport { GET_ME } from '../utils/queries';\n\nconst SavedPlants = () => {\n  const { loading, data } = useQuery(GET_ME);\n  const [removePlant] = useMutation(REMOVE_PLANT);\n\n  const userData = data?.me || [];\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeletePlant = async (plantId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      await removePlant({\n        variables: { plantId },\n      });\n\n      removePlantId(plantId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved plants!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedPlants.length\n            ? `Viewing ${userData.savedPlants.length} saved ${userData.savedPlants.length === 1 ? 'plant' : 'plants'}:`\n            : 'You have no saved plants!'}\n        </h2>\n        <CardColumns>\n          {userData.savedPlants.map((plant) => {\n            return (\n              <Card key={plant.plantId} border='dark'>\n                {plant.image ? <Card.Img src={plant.image} alt={`The cover for ${plant.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{plant.title}</Card.Title>\n                  <p className='small'>Authors: {plant.authors}</p>\n                  <Card.Text>{plant.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeletePlant(plant.plantId)}>\n                    Delete this Plant!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedPlants;\n","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from \"@apollo/react-hooks\";\n\nimport { ADD_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    \n    try {\n      const {data} = await addUser({\n        variables: {...userFormData},\n      });\n      \n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from \"@apollo/react-hooks\";\n\nimport { LOGIN_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [loginUser] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const {data} = await loginUser({\n        variables: {...userFormData},\n      });\n\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar className=\"header textColor\" variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Planty Planter Pals\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/search'>\n                Search for your area\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See your garden\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","export default __webpack_public_path__ + \"static/media/Garden.f741fb42.jpeg\";","import garden from '../Assets/Garden.jpeg';\n\n\nconst Home = () => {\n    return (\n        <>\n        <div className=\"background textWhite\">\n        <div><h1 id=\"homeHeader\">Welcome!</h1></div>\n        <div className=\"container-fluid justify-content-center background\">\n        <div className=\"row align-items-start\">\n            <div className=\"col\">\n                <img className=\"homeImg\" src={garden} alt=\"A lush green backyard with lots of plants\"></img>\n            </div>\n            <div className=\"col introStyle px-3\">\n                <p className=\"py-2\">As the founders of PPP we are all from the Colorado area. In our state weather can be unpredictable, sometimes the mystery of will it snow in late May is fun and other times it's down right frustrating.</p>\n\n                <p className=\"py-2\">I think most of us at one point or another have gone to plant a garden in our backyard, put in a day of work getting it to look nice and then a late snow comes through and kills everything.</p>\n\n                <p className=\"py-2\">As victims of Colorado weather in the past we said enough is enough, we want to make informed decisions about planning our gardens and thus PPP was born. Here to help you plan and maintain a beautfiul garden year round.</p>\n            </div>        \n        </div>\n        </div>\n        \n\n        \n        \n        \n        </div>\n        </>\n    )\n};\n\nexport default Home;","const Footer = () => {\nreturn(\n<>\n<div className=\"my-0 splitter\">\n</div>\n<div className=\" pt-5 container-auto translate-middle center\">\n<div class=\"\">\n<h2 className=\"text-center textWhite\">Popular plants!</h2>\n</div>\n\n<div className=\"text-center py-2\">\n    <span class=\"dot\"></span>\n    <span class=\"dot\"></span>\n    <span class=\"dot\"></span>\n    <span class=\"dot\"></span>\n    <span class=\"dot\"></span>\n</div>\n</div>\n\n</>\n)\n};\n\nexport default Footer;","import React from 'react';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport SearchPlants from './pages/SearchPlants';\nimport SavedPlants from './pages/SavedPlants';\nimport Navbar from './components/Navbar';\nimport Home from './pages/Home';\nimport Footer from './components/Footer';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n      <div className=\"flex-column justify-flex-start min-100-vh background\">\n          <div className=\"\">\n          <Navbar />\n          <Routes>\n            <Route \n              path='/' \n              element={<Home />} \n            />\n            <Route \n              path='/saved' \n              element={<SavedPlants />} \n            />\n            <Route\n              path='/search'\n              element={<SearchPlants />}\n            />\n            <Route \n              path='*'\n              element={<h1 className='display-2'>Wrong page!</h1>}\n            />\n          </Routes>\n          </div>\n        </div>\n      </Router>\n      <Footer></Footer>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"background\">\n    <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}